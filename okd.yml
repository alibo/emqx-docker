apiVersion: v1
kind: Template
metadata:
  name: emqx3
objects:

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${NAME}"
      name: "${SERVICE_NAME}"
    name: "${SERVICE_NAME}"
  spec:
    clusterIP: None
    ports:
    - name: mqtt
      port: 1883
      protocol: TCP
      targetPort: 1883
    - name: mqttssl
      port: 8883
      protocol: TCP
      targetPort: 8883
    - name: management
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: ws
      port: 8083
      protocol: TCP
      targetPort: 8083
    - name: wss
      port: 8084
      protocol: TCP
      targetPort: 8084
    - name: dashboard
      port: 18083
      protocol: TCP
      targetPort: 18083
    - name: mapping
      port: 4369
      protocol: TCP
      targetPort: 4369
    selector:
      app: "${NAME}"
    sessionAffinity: None
    type: ClusterIP


- kind: ConfigMap
  apiVersion: v1
  data:
    EMQX_CLUSTER__AUTOCLEAN: 5m
    EMQX_CLUSTER__AUTOHEAL: "on"
    EMQX_CLUSTER__DISCOVERY: k8s
    EMQX_CLUSTER__K8S__ADDRESS_TYPE: ip
    EMQX_CLUSTER__K8S__APISERVER: "${K8S_API_SERVER}"
    EMQX_CLUSTER__K8S__APP_NAME: "${NAME}"
    EMQX_CLUSTER__K8S__NAMESPACE: "${NAMESPACE}"
    EMQX_CLUSTER__K8S__SERVICE_NAME: "${SERVICE_NAME}"
    EMQX_CLUSTER__NAME: "${NAME}"
    EMQX_LOG__CONSOLE__LEVEL: error
    EMQX_NAME: "${NAME}"
  metadata:
    name: "${NAME}-config"
    app: "${NAME}"

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${SERVICE_NAME}-certs"
    app: "${NAME}"
  data:
    key.pem: |-
      <!-- private key -->
    cert.pem: |-
      <!-- certificate -->
    cacert.pem: |-
      <!-- custom ca certificate -->
    dh-params.pem: |-
      <!-- Ephemeral Diffie-Helman key exchange -->

- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    generateName: view-
    namespace: "${NAMESPACE}"
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: default
    namespace: "${NAMESPACE}"
  userNames:
  - "system:serviceaccount:${NAMESPACE}:default"

- apiVersion: v1
  data:
    EMQX_NODE__COOKIE: "${EMQ_NODE_COOKIE}"
  kind: Secret
  metadata:
    name: "${NAME}-cookie-secret"
    app: "${NAME}"

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: emqx
    labels:
      app: emqx

- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: "${NAME}"
    name: emqx
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: emqx:3.0.0
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: openshift-emqx30
        uri: https://github.com/alibo/emqx-docker.git
      type: Git
    strategy:
      dockerStrategy: {}
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${SERVICE_NAME}"
    labels:
      name: "${SERVICE_NAME}"
      app: "${NAME}"
  spec:
    replicas: 3
    serviceName: "${SERVICE_NAME}"
    triggers:
      - type: "ConfigChange"
    template:
      metadata:
        labels:
          app: "${NAME}"
      spec:
        containers:
        - name: emqtt
          image: "docker-registry.default.svc:5000/${NAMESPACE}/emqx:3.0.0"
          ports:
            - containerPort: 1883
            - containerPort: 8883
            - containerPort: 8080
            - containerPort: 8083
            - containerPort: 8084
            - containerPort: 18083
            - containerPort: 4369
            - containerPort: 4370
            - containerPort: 6369
            - containerPort: 6370
            - containerPort: 6371
            - containerPort: 6372
            - containerPort: 6373
            - containerPort: 6374
            - containerPort: 6375
            - containerPort: 6376
            - containerPort: 6377
            - containerPort: 6378
          volumeMounts:
              - name: "${SERVICE_NAME}-certs"
                mountPath: "/opt/emqx/etc/certs/"
          readinessProbe:
            tcpSocket:
              port: 1883
            initialDelaySeconds: 5
            periodSeconds: 10
          envFrom:
            - secretRef:
                name: "${NAME}-cookie-secret"
            - configMapRef:
                name: "${NAME}-config"
        volumes:
            - name: "${SERVICE_NAME}-certs"
              configMap:
                name: "${SERVICE_NAME}-certs"

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${NAME}
      router: public
    name: wss
  spec:
    host: wss-${ROUTE_PREFIX}.${HOSTNAME}
    port:
      targetPort: wss
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: None
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${NAME}
      router: public
    name: mqtt
  spec:
    host: mqtt-${ROUTE_PREFIX}.${HOSTNAME}
    port:
      targetPort: mqttssl
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${NAME}
      router: public
    name: mqtt-edge
  spec:
    host: mqtt-edge-${ROUTE_PREFIX}.${HOSTNAME}
    port:
      targetPort: mqtt
    tls:
      termination: edge
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${NAME}
      router: private
    name: dashboard
  spec:
    host: dashboard-${ROUTE_PREFIX}.${PRIVATE_HOSTNAME}
    port:
      targetPort: dashboard
    tls:
      termination: edge
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None

parameters:
  - name: EMQ_NODE_COOKIE
    description: "Cookie for distributed erlang nodes"
    generate: expression
    from: "[a-zA-Z0-9]{16}"

  - name: SERVICE_NAME
    displayName: Service Name
    description: The name used when creating the required 
      service etc. Must be unique and contain only lower-case letters.
    required: true
    value: emqx3

  - name: NAME
    displayName: Application Name
    description: Must be unique and contain only lower-case letters, numbers and dashes.
    required: true
    value: emqx3

  - name: ROUTE_PREFIX
    displayName: Route prefix for routes
    description: Must be unique across all projects, and contain only lower-case letters, numbers and dashes.
    required: true
    value: emqx3

  - name: NAMESPACE
    displayName: Namespace
    description: Name of this project
    required: true
    value: emqx3-project

  - name: HOSTNAME
    displayName: Router Hostname
    description: Hostname of router
    required: true
    value: apps.public.example.com

  - name: PRIVATE_HOSTNAME
    displayName: Private Router Hostname
    description: Hostname of private router
    required: true
    value: apps.private.example.com

  - name: K8S_API_SERVER
    displayName: Kubernetes API Server
    description: Kubernetes API Server
    required: true
    value: k8s.example.com
  